External View of the Software
=============================

The library is delivered as an archive consisting of the source files, licenses, a Makefile, a configuration script, and everything to create documentation.

The following is a depiction of the directory structure:

   libmcs/
      doc/
         _static/css/custom.css
            CSS file to be used by the HTML documentation.
         figure/
            Directory to contain figures used by one or multiple generated documents.
         sdd/
            conf.py
               Configuration file for the Sphinx documentation builder.
            index.rst
               Index file for the document. This is the starting point for document generation, all
               other files should be referenced directly or indirectly by this one.
            other files
               Other reStructuredText files for the document. Usually each chapter either has its
               own directory or at least its own file.
         sum/
            conf.py
               Configuration file for the Sphinx documentation builder.
            index.rst
               Index file for the document. This is the starting point for document generation, all
               other files should be referenced directly or indirectly by this one.
            other files
               Other reStructuredText files for the document. Usually each chapter has its own
               file. You're currently reading one of them.
      libm/
         common/
            fenv.c
               Implementation file for ``fenv.h`` which contains only stub implementations that
               return an error value.
            signgam.c
               This file only provides the ``signgam`` global variable used by the :ref:`lgamma`
               procedures.
            tool.[c|h]
               Header file that provides several library internal convenience procedures to be used
               by many library procedures.
            other files
               Other ``.c`` files which have no content other than comments to describe procedures
               (mostly macros) that are implemented in ``math.h`` or ``complex.h``.
         complexd/
            internal/
               Internal ``.c`` files only used by procedures in the directory above.

            Contains all ``.c`` files for double precision complex procedures.
         complexf/
            internal/
               Internal ``.c`` files only used by procedures in the directory above.

            Contains all ``.c`` files for single precision complex procedures.
         complexfe/
            internal/
               .gitkeep
                  Placeholder file that only exists so that git does not remove the otherwise empty
                  directory.

            Placeholder directory which shall contain all ``.c`` files for single precision complex
            procedures which have been implemented using double precision.
         complexl/
            internal/
               .gitkeep
                  Placeholder file that only exists so that git does not remove the otherwise empty
                  directory.

            Placeholder directory which shall contain all ``.c`` files for long double precision
            complex procedures which do not have the same size as double.
         include/
            config.h
               Header file that contains the configuration of the library, as chosen during the
               configuration step. This file gets generated by running ``configure``.
            complex.h
               Header file which needs to be included when building the user project and complex
               procedures are needed.
            fenv.h
               Header file which should not be included as is. The procedures have no functionality
               other than returning an error value and providing prototypes. If the user wants to
               use ``fenv`` s/he will have to implement the features her/himself (or copy them from
               somewhere). We cannot provide these functionalities for the user as their
               implementation is highly platform dependant.
            internal_config.h
               Header file that converts the choices the user has made during configuration into
               defines used by the library.
            math.h
               Header file which needs to be included when building the user project.
            tgmath.h
               Header file which should never be included.
         machine/
            .gitkeep
               Placeholder file that only exists so that git does not remove the otherwise empty
               directory.

            Placeholder directory which shall contain sub-directories for each architecture that
            needs a hardware specific implementation of a procedure. Those files are only compiled
            if the appropriate changes are made to the Makefile. Example structure if the user
            were to add a procedure to directly call a hardware square root instruction on a SPARC
            V8 platform:

            sparc_v8/
               mathd/
                  sqrtd.c
               mathf/
                  sqrtf.c
         mathd/
            internal/
               Internal ``.c`` files only used by procedures in the directory above.

            Contains all ``.c`` files for double precision procedures.
         mathf/
            internal/
               Internal ``.c`` files only used by procedures in the directory above.

            Contains all ``.c`` files for single precision procedures.
         mathfe/
            internal/
               .gitkeep
                  Placeholder file that only exists so that git does not remove the otherwise empty
                  directory.

            Placeholder directory which shall contain all ``.c`` files for single precision
            procedures which have been implemented using double precision.
         mathl/
            internal/
               .gitkeep
                  Placeholder file that only exists so that git does not remove the otherwise empty
                  directory.

            Placeholder directory which shall contain all ``.c`` files for long double precision
            procedures which do not have the same size as double.
      LICENSES/
         Contains license files which are referenced by the :ref:`SPDX <ABBR>` headers in the other
         implementation files.
      sw-quality/
         Contains the configuration and scripts to run pc-lint.
      .gitignore
         Typical gitignore file.
      .gitlab-ci.yml
         Continuous integration file for usage with Gitlab. Automatically runs documentation
         generation.
      configure
         Configuration script that has to be run by the user before running ``make``.
      COPYING.md
         License file which lists all other licenses and states the overall license of the library.
      Dockerfile
         Dockerfile used for continuous integration.
      Makefile
         Build the library.
      README.md
         Typical readme file.
      requirements.in
         Contains the python package requirements used for document generation, it's fed into
         ``pip-compile`` to create the ``requirements.txt`` file.
      requirements.txt
         Contains the python package requirements used for document generation. Autogenerated from
         ``requirements.in`` and used by the Dockerfile.

After using the included Makefile the directory structure will be extended with build specific directories:

   libmcs/
      build-ARCH/
         bin/
            libm.a
               This is the final static library, the product and heart of the library.
         obj/
            Contains the intermediate object files which were created by the Makefile to produce
            the static library.
         build-info.yml
            Contains information on the built library, such as its build date, toolchain used,
            compilation flags used, and git commit used.
      [...]
         Each architecture has its own build directory.

How to use the Makefile is depicted in :ref:`Operations Manual`
