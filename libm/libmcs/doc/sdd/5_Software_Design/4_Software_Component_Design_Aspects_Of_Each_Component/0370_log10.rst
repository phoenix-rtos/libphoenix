log10
~~~~~

.. c:autodoc:: mathd/log10d.c

Special cases
^^^^^^^^^^^^^

+--------------------------+--------------------------+
| x                        | Result                   |
+==========================+==========================+
| :math:`<0`               | :math:`qNaN`             |
+--------------------------+--------------------------+
| :math:`Â±0`               | :math:`-Inf`             |
+--------------------------+--------------------------+
| :math:`1`                | :math:`+0`               |
+--------------------------+--------------------------+
| :math:`+Inf`             | :math:`+Inf`             |
+--------------------------+--------------------------+
| :math:`NaN`              | :math:`qNaN`             |
+--------------------------+--------------------------+

Mathematical Approach
^^^^^^^^^^^^^^^^^^^^^

The approach is to first work on special values and then use polynomial approximation for the calculation.

Use the following constants as calculation/return values:

* :math:`log_{10}(2) \approx Log_{10}2_{hi} + Log_{10}2_{lo}`
* :math:`Log_{10}2_{hi} =` ``0x3FD34413509F6000 (0x3E9A2080)``
* :math:`Log_{10}2_{lo} =` ``0x3D59FEF311F12B36 (0x355427DB)``
* :math:`\frac{1}{ln(10)} \approx invln10_{hi} + invln10_{lo}`
* :math:`invln10_{hi} =` ``0x3FDBCB7B15200000 (0x3EDE6000)``
* :math:`invln10_{lo} =` ``0x3DBB9438CA9AADD5 (0xB804EAD9)``

#. For :math:`x` is :math:`NaN` or positive infinity, return :math:`x+x`.
#. For :math:`x` is a zero, return negative infinity.
#. For :math:`x` is negative, return :math:`NaN`.
#. For :math:`x` is subnormal, scale up by multiplying with :math:`2^{54}` (float: :math:`2^{25}`).
#. Given :math:`x` find :math:`f` and integer :math:`k` such that the formulae [#]_

   .. math::
      :label: formula_log10_1

      x                  &= 2^k \cdot (1 + f)  \\
      \frac{\sqrt{2}}{2} &< (1 + f) < \sqrt{2}

   hold true [#]_.
#. Use :ref:`__log1p <internal_log>` to return the result of:

   .. math::
      :label: formula_log10_2

      hfsq        &= \frac{f^2}{2}  \\
      r           &= \_\_log1p(f)  \\
      hi          &= f - hfsq,\ with\ the\ lowword\ masked\ off  \\
      lo          &= (f - hi) - hfsq + r  \\
      z           &= k \cdot Log_{10}2_{hi}  \\
      w           &= z + hi \cdot invln10_{hi}  \\
      log_{10}{x} &= \Big(\big(k \cdot Log_{10}2_{lo} + (lo + hi) \cdot invln10_{lo} + lo \cdot invln10_{hi}\big)  \\
                  &\qquad + (z - w) + hi \cdot invln10_{hi}\Big) + w

.. [#] This implementation of log is a variation of the algorithm proposed by W. J. Cody, JR. and W. Waite in *Software Manual for the Elementary Functions*
.. [#] Use mantissa part of ``highword`` + ``0x95f64`` (float: integer representation + ``0x95f64 << 3``) to find :math:`k`.

Requirements
^^^^^^^^^^^^

* REQ-ML-0950
* REQ-ML-0960
* REQ-ML-0970
* REQ-ML-0971
* REQ-ML-0980
* REQ-ML-0981

Source Code Files
^^^^^^^^^^^^^^^^^

* libm/include/math.h
* libm/mathd/log10d.c
* libm/mathf/log10f.c

References
^^^^^^^^^^

* :ref:`__log1pmf <internal_log>`
