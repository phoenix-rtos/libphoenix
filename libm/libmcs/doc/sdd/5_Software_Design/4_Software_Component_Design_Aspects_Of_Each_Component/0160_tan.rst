tan
~~~

.. c:autodoc:: mathd/tand.c

Special cases
^^^^^^^^^^^^^

+--------------------------+--------------------------+
| x                        | Result                   |
+==========================+==========================+
| :math:`±0`               | :math:`x`                |
+--------------------------+--------------------------+
| :math:`±Inf`             | :math:`qNaN`             |
+--------------------------+--------------------------+
| :math:`NaN`              | :math:`qNaN`             |
+--------------------------+--------------------------+

Mathematical Approach
^^^^^^^^^^^^^^^^^^^^^

``tan``: The ``tan`` functionality is similar to the :ref:`cos` and :ref:`sin` functions in that they use the same range reduction function from :ref:`internal_trig`.

The approach is to first work on special values, reduce the range of the input value to :math:`\left[-\frac{\pi}{4},\frac{\pi}{4}\right]` and then use ``__tan`` for the actual calculation.

The input value :math:`x` is interpreted in radians.

#. If the input argument is already within the range :math:`\left[-\frac{\pi}{4},\frac{\pi}{4}\right]`:

   #. If the input argument is smaller than :math:`2^{-27}` (float: :math:`2^{-12}`), return :math:`x`.
   #. Otherwise use ``__tan``.

#. For :math:`x` is :math:`NaN` or infinite, return :math:`qNaN`.
#. The input value :math:`x` is reduced to the range :math:`\left[-\frac{\pi}{4},\frac{\pi}{4}\right]` by using the function :ref:`__rem_pio2 <internal_trig>`. Save the return value as :math:`n`.
#. For :math:`n` is even, return the result of ``__tan`` with the third input set to :math:`1`.
#. Else, return the result of ``__tan`` with the third input set to :math:`-1`.

--------------------------

``__tan``: The approach is to use a polynomial approximation for the calculation.

Use the following constants as calculation/return values:

* :math:`\frac{\pi}{4} \approx pio4 + pio4_{lo}`
* :math:`pio4 =` ``0x3FE921FB54442D18 (0x3F490FDA)``
* :math:`pio4_{lo} =` ``0x3C81A62633145C07 (0x33222168)``
* :math:`T0 =` ``0x3FC5555555555555 (0x3EAAAAAB)`` :math:`\approx \frac{1}{3}`
* :math:`T1 =` ``0x3FC111111110FE7A (0x3E088889)`` :math:`\approx \frac{2}{15}`
* :math:`T2 =` ``0x3FABA1BA1BB341FE (0x3D5D0DD1)`` :math:`\approx \frac{17}{315}`
* :math:`T3 =` ``0x3F9664F48406D637 (0x3CB327A4)`` :math:`\approx ...`
* :math:`T4 =` ``0x3F8226E3E96E8493 (0x3C11371F)``
* :math:`T5 =` ``0x3F6D6D22C9560328 (0x3B6B6916)``
* :math:`T6 =` ``0x3F57DBC8FEE08315 (0x3ABEDE48)``
* :math:`T7 =` ``0x3F4344D8F2F26501 (0x3A1A26C8)``
* :math:`T8 =` ``0x3F3026F71A8D1068 (0x398137B9)``
* :math:`T9 =` ``0x3F147E88A03792A6 (0x38A3F445)``
* :math:`T10 =` ``0x3F12B80F32F0A7E9 (0x3895C07A)``
* :math:`T11 =` ``0xBEF375CBDB605373 (0xB79BAE5F)``
* :math:`T12 =` ``0x3EFB2A7074BF7AD4 (0x37D95384)``

#. The identity :math:`tan(-x) = -tan(x)` can be used to reduce :math:`x` to positive.
#. The tangent of an argument can be calculated with:

   .. math::
      :label: formula_tan_1

      tan(x) &= x + \frac{1}{3}x^3 + \frac{2}{15}x^5 + \frac{17}{315}x^7 + ...  \\
             &= \sum\limits_{i=1}^{\infty} \frac{(-1)^{i-1} \cdot 2^{2i} \cdot (2^{2i}-1) \cdot B_{2i} \cdot x^{2i-1}}{(2i)!}

   with :math:`B_{n}` being the :math:`n`-th Bernoulli number.
#. If :math:`|x| < 0.67434` [#]_:

   #. Use a polynomial approximation of formula :math:numref:`formula_tan_1` to calculate the tangent [#]_:

      .. math::
         :label: formula_tan_2

         tan(x) \sim x \cdot (T0 \cdot x + T1 \cdot x^3 + T2 \cdot x^5 + ... + T12 \cdot x^{27})

   #. To increase the accuracy make use of the identity

      .. math::
         :label: formula_tan_3

         tan(x+y) &= tan(x) + tan'(x) \cdot y  \\
                  &\sim tan(x) + (1+ x^2) \cdot y

      to change the approximation to:

      .. math::
         :label: formula_tan_4

         r(x)     &= x^3 \cdot (T1 + x \cdot (T2 + x \cdot (... + x \cdot (T11 + x \cdot T12))))  \\
         R(x)     &= T0 \cdot x^3 + (x^2 \cdot (r(x)+y) +y)  \\
         tan(x+y) &= x + R(x)

   #. If :math:`k` is :math:`1`, return the result of the approximation.
   #. Return :math:`-\frac{1}{tan(x+y)}`, to not loose precision on this arithmetic operation, use this formula to create the return value:

      .. math::
         :label: formula_tan_5

         -\frac{1}{tan(x+y)} = t + a \cdot (s + t \cdot v)

      with

      #. :math:`z = tan(x+y)` with the ``lowword`` masked to zero (float: last 12 bits of the integer representation masked to zero).
      #. :math:`v = R(x) - (z - x)`.
      #. :math:`a = -\frac{1}{tan(x+y)}`.
      #. :math:`t = a` with the ``lowword`` masked to zero (float: last 12 bits of the integer representation masked to zero).
      #. :math:`s = 1 + t \cdot z`.

#. As the approximation in formula :math:numref:`formula_tan_2` is only reliable for :math:`|x| < 0.67434`, make use of the identity

   .. math::
      :label: formula_tan_6

      tan(x) &= tan\bigg(\frac{\pi}{4}-f\bigg)  \\
             &= \frac{1-tan(f)}{1+tan(f)}  \\
             &= 1-2 \cdot \bigg(tan(f) - \frac{tan(f)^2}{1+tan(f)}\bigg)

   with

   #. If :math:`x` is negative, replace :math:`x` with :math:`x = -x`` and :math:`y` with :math:`y = -y`.
   #. :math:`f = \frac{\pi}{4} - x`.

   to change the approximation of the tangent.
#. Let :math:`f = \frac{\pi}{4} - x = PIo4 - x + (PIo4_{lo} - y)`.
#. Calculate :math:`tan(f)` as in formula :math:numref:`formula_tan_4`, with :math:`x = f` and :math:`y = 0`.
#. Use formula :math:numref:`formula_tan_6` to calculate :math:`tan(x)`:

   .. math::
      :label: formula_tan_7

      tan(x) = k - 2 \cdot \bigg(f-\Big(\frac{tan(f)^2}{tan(f)+k}-R(f)\Big)\bigg)

#. Return :math:`tan(x)` with the sign of the original :math:`x`.

.. [#] Use ``highword`` :math:`<` ``0x3FE59428`` (float: use integer representation of :math:`x <` ``0x3F2CA140``).
.. [#] The error of this approximation is less than :math:`2^{-59.2}`.

Requirements
^^^^^^^^^^^^

* REQ-ML-0500
* REQ-ML-0520
* REQ-ML-0530
* REQ-ML-0550

Source Code Files
^^^^^^^^^^^^^^^^^

* libm/include/math.h
* libm/mathd/tand.c
* libm/mathf/tanf.c

References
^^^^^^^^^^

* :ref:`__rem_pio2 <internal_trig>`
* :ref:`cos`
* :ref:`sin`
